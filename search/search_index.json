{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is a Beacon? Beacons are web-based discovery services for genetic variants. They are useful to know if the dataset present at any institution connected to the beacon network contains a given allele (or genetic variant). Beacons are an efficient way to share valuable genetic information without overly expose genomic data, due to privacy or security issues. You can find more info on the Beacon Network at this page: https://beacon-network.org/#/about . Beacon API v.1.0 can be found at [this link].(https://github.com/ga4gh-beacon/specification/blob/develop/beacon.md) Purpose This documentation illustrates how to set up a beacon based on python (>3.6) backend, a Flask server and a Mongodb instance. Our idea This project is under continuous improvement and our ultimate goal would be to update from the currently supported API 1.0 to the new API 2.0. The tool is intended to be ultimately integrated with the Scout VCF visualization tool but it's meant to work as well as a standalone. So having Scout installed is not a requirement. This software was developed by Clinical Genomics , Science For Life Laboratory, Stockholm.","title":"Home"},{"location":"#what-is-a-beacon","text":"Beacons are web-based discovery services for genetic variants. They are useful to know if the dataset present at any institution connected to the beacon network contains a given allele (or genetic variant). Beacons are an efficient way to share valuable genetic information without overly expose genomic data, due to privacy or security issues. You can find more info on the Beacon Network at this page: https://beacon-network.org/#/about . Beacon API v.1.0 can be found at [this link].(https://github.com/ga4gh-beacon/specification/blob/develop/beacon.md)","title":"What is a Beacon?"},{"location":"#purpose","text":"This documentation illustrates how to set up a beacon based on python (>3.6) backend, a Flask server and a Mongodb instance.","title":"Purpose"},{"location":"#our-idea","text":"This project is under continuous improvement and our ultimate goal would be to update from the currently supported API 1.0 to the new API 2.0. The tool is intended to be ultimately integrated with the Scout VCF visualization tool but it's meant to work as well as a standalone. So having Scout installed is not a requirement. This software was developed by Clinical Genomics , Science For Life Laboratory, Stockholm.","title":"Our idea"},{"location":"install/","text":"Beacon setup Prerequisites Installation Server settings Running the server Prerequisites Python 3.6+ installed A working instance of MongoDB . From the mongo shell you can create a database using this syntax: use <name_of_database> Database name can be customized. If you don't have any preferences cgbeacon2 will work just fine. Installation Clone this repository from github using this command: git clone https://github.com/Clinical-Genomics/cgbeacon2.git Change directory to the cloned folder and from there, install the software using the following command: pip install -e . To make sure the software is installed, from the terminal, you can run the following command: cgbeacon2 --version Server settings Default server settings are specified in the config.py file under cgbeacon2/instance Secret key and database connection parameters depend on your server implementation, and for the purpose of testing the software they might be left unchanged. # secret key: SECRET_KEY = \"MySuperSecretKey\" # Database connection parameters DB_HOST = \"127.0.0.1\" DB_PORT = 27017 DB_NAME = \"cgbeacon2-test\" DB_URI = f\"mongodb://{DB_HOST}:{DB_PORT}/{DB_NAME}\" ORGANISATION and BEACON_OBJ dictionaries contain values that are returned by the server when users or other beacons send a request to the info endpoint(/), so they should be filled in properly in a production environment: ORGANISATION = dict( id=\"scilifelab\", # mandatory name=\"Clinical Genomics, SciLifeLab\", # mandatory description=\"A science lab\", address=\"\", contactUrl=\"\", info=[], logoUrl=\"\", welcomeUrl=\"\", ) BEACON_OBJ = dict( id=\"SciLifeLab-beacon\", # mandatory name=\"SciLifeLab Stockholm Beacon\", # mandatory organisation=ORGANISATION, # mandatory alternativeUrl=\"http//scilifelab.beacon_alt.se\", createDateTime=\"2015-06-15T00:00.000Z\", description=\"Beacon description\", info=[], welcomeUrl=\"http//scilifelab.beacon.se\", ) The info field of both object can contain a series of custom key/values that better describe your organisation and its beacon server. OAUTH2 permissions layer parameters are responsible for the authentication of incoming requests bearing a auth token, and should be left unchanged: ELIXIR_OAUTH2 = dict( server=\"https://login.elixir-czech.org/oidc/jwk\", # OAuth2 server that returns JWK public key issuers=[ \"https://login.elixir-czech.org/oidc/\" ], # Authenticated Bearer token issuers userinfo=\"https://login.elixir-czech.org/oidc/userinfo\", # Where to send access token to view user data (permissions, statuses, ...) audience=[], # List of strings. Service(s) the token is intended for. (key provided by the Beacon Network administrator) verify_aud=False, # if True, force verify audience for provided token bona_fide_requirements=\"https://doi.org/10.1038/s41431-018-0219-y\", ) Running the server To run the server, from the command line, you can use the following command: cgbeacon2 run","title":"Installation"},{"location":"install/#beacon-setup","text":"Prerequisites Installation Server settings Running the server","title":"Beacon setup"},{"location":"install/#prerequisites","text":"Python 3.6+ installed A working instance of MongoDB . From the mongo shell you can create a database using this syntax: use <name_of_database> Database name can be customized. If you don't have any preferences cgbeacon2 will work just fine.","title":"Prerequisites"},{"location":"install/#installation","text":"Clone this repository from github using this command: git clone https://github.com/Clinical-Genomics/cgbeacon2.git Change directory to the cloned folder and from there, install the software using the following command: pip install -e . To make sure the software is installed, from the terminal, you can run the following command: cgbeacon2 --version","title":"Installation"},{"location":"install/#server-settings","text":"Default server settings are specified in the config.py file under cgbeacon2/instance Secret key and database connection parameters depend on your server implementation, and for the purpose of testing the software they might be left unchanged. # secret key: SECRET_KEY = \"MySuperSecretKey\" # Database connection parameters DB_HOST = \"127.0.0.1\" DB_PORT = 27017 DB_NAME = \"cgbeacon2-test\" DB_URI = f\"mongodb://{DB_HOST}:{DB_PORT}/{DB_NAME}\" ORGANISATION and BEACON_OBJ dictionaries contain values that are returned by the server when users or other beacons send a request to the info endpoint(/), so they should be filled in properly in a production environment: ORGANISATION = dict( id=\"scilifelab\", # mandatory name=\"Clinical Genomics, SciLifeLab\", # mandatory description=\"A science lab\", address=\"\", contactUrl=\"\", info=[], logoUrl=\"\", welcomeUrl=\"\", ) BEACON_OBJ = dict( id=\"SciLifeLab-beacon\", # mandatory name=\"SciLifeLab Stockholm Beacon\", # mandatory organisation=ORGANISATION, # mandatory alternativeUrl=\"http//scilifelab.beacon_alt.se\", createDateTime=\"2015-06-15T00:00.000Z\", description=\"Beacon description\", info=[], welcomeUrl=\"http//scilifelab.beacon.se\", ) The info field of both object can contain a series of custom key/values that better describe your organisation and its beacon server. OAUTH2 permissions layer parameters are responsible for the authentication of incoming requests bearing a auth token, and should be left unchanged: ELIXIR_OAUTH2 = dict( server=\"https://login.elixir-czech.org/oidc/jwk\", # OAuth2 server that returns JWK public key issuers=[ \"https://login.elixir-czech.org/oidc/\" ], # Authenticated Bearer token issuers userinfo=\"https://login.elixir-czech.org/oidc/userinfo\", # Where to send access token to view user data (permissions, statuses, ...) audience=[], # List of strings. Service(s) the token is intended for. (key provided by the Beacon Network administrator) verify_aud=False, # if True, force verify audience for provided token bona_fide_requirements=\"https://doi.org/10.1038/s41431-018-0219-y\", )","title":"Server settings"},{"location":"install/#running-the-server","text":"To run the server, from the command line, you can use the following command: cgbeacon2 run","title":"Running the server"},{"location":"loading/","text":"Adding data to the database Dataset and variant data can be loaded into the database using specific the specific command line. To visualize command line options, from the terminal you can user the following command: cgbeacon2 --help . The default procedure to add variants to the beacon is always the following: Create a dataset to link your variants to. Load variants from a VCF file for one or more samples, specifying which dataset these variants belong to. How to add: Demo data A new dataset (custom data) Variants (custom data) Demo data Demo data consisting in a test dataset with public access and a set of variants (SNVs and structural variants of different type) is available under the cgbeacon2/resources/demo folder. You don't need to load this data manually since the following command will take care of everything: cgbeacon2 add demo Adding a new dataset A new dataset can be created with the following command: cgbeacon2 add dataset -id <dataset_id> -name <\"A dataset name\"> -build <GRCh37|GRCh38> -authlevel <public|registered|controlled> The above parameters (id, name, build, authlevel) are mandatory. If user doesn't specify any genome build then the default build used is GRCh37. One dataset can be associated to variants called using only one genome build. authlevel parameter will be used in queries to return results according to the request authentication level. Public datasets can be interrogated by any beacon and any user in general and should not be used to store sensitive data such as individual phenotypes. Bona fide researchers logged in via the Elixir AAI will be able to access data store in registered datasets . Controlled access datasets might be used to store sensitive information and will be accessed only by users that have a signed agreement and their access approved by a Data Access Committee (DAC). More info about the ELixir AAI authentication is available here Other optional parameters that can be provided to improve the dataset description are the following. -desc TEXT dataset description -version FLOAT dataset version, i.e. 1.0 -url TEXT external url -cc TEXT consent code key. i.e. HMB --update The --update flag will allow to modify the information for a dataset that is already existing in the database. Adding variant data Variant data can be loaded to the database using the following command: cgbeacon2 add variants Options: -ds TEXT dataset ID [required] -vcf PATH [required] -sample TEXT one or more samples to save variants for [required] -panel PATH one or more bed files containing genomic intervals ds (dataset id) and vcf (path to the VCF file containing the variants) are mandatory parameters. One or more samples included in the VCF file must also be specified. To specify multiple samples use the -sample parameter multiple times (example -sample sampleA -sample sampleB ..). VCF files might as well be filtered by genomic intervals prior to variant uploading. To upload variants filtered by multiple panels use the options -panel panelA -panel panelB, providing the path to a bed file containing the genomic intervals of interest. Additional variants for the same sample(s) and the same dataset might be added any time by running the same cgbeacon2 add variants specifying another VCF file. Whenever the variant is already found for the same sample and the same dataset it will not be saved twice.","title":"Loading datasets and variants"},{"location":"loading/#adding-data-to-the-database","text":"Dataset and variant data can be loaded into the database using specific the specific command line. To visualize command line options, from the terminal you can user the following command: cgbeacon2 --help . The default procedure to add variants to the beacon is always the following: Create a dataset to link your variants to. Load variants from a VCF file for one or more samples, specifying which dataset these variants belong to.","title":"Adding data to the database"},{"location":"loading/#how-to-add","text":"Demo data A new dataset (custom data) Variants (custom data)","title":"How to add:"},{"location":"loading/#demo-data","text":"Demo data consisting in a test dataset with public access and a set of variants (SNVs and structural variants of different type) is available under the cgbeacon2/resources/demo folder. You don't need to load this data manually since the following command will take care of everything: cgbeacon2 add demo","title":"Demo data"},{"location":"loading/#adding-a-new-dataset","text":"A new dataset can be created with the following command: cgbeacon2 add dataset -id <dataset_id> -name <\"A dataset name\"> -build <GRCh37|GRCh38> -authlevel <public|registered|controlled> The above parameters (id, name, build, authlevel) are mandatory. If user doesn't specify any genome build then the default build used is GRCh37. One dataset can be associated to variants called using only one genome build. authlevel parameter will be used in queries to return results according to the request authentication level. Public datasets can be interrogated by any beacon and any user in general and should not be used to store sensitive data such as individual phenotypes. Bona fide researchers logged in via the Elixir AAI will be able to access data store in registered datasets . Controlled access datasets might be used to store sensitive information and will be accessed only by users that have a signed agreement and their access approved by a Data Access Committee (DAC). More info about the ELixir AAI authentication is available here Other optional parameters that can be provided to improve the dataset description are the following. -desc TEXT dataset description -version FLOAT dataset version, i.e. 1.0 -url TEXT external url -cc TEXT consent code key. i.e. HMB --update The --update flag will allow to modify the information for a dataset that is already existing in the database.","title":"Adding a new dataset"},{"location":"loading/#adding-variant-data","text":"Variant data can be loaded to the database using the following command: cgbeacon2 add variants Options: -ds TEXT dataset ID [required] -vcf PATH [required] -sample TEXT one or more samples to save variants for [required] -panel PATH one or more bed files containing genomic intervals ds (dataset id) and vcf (path to the VCF file containing the variants) are mandatory parameters. One or more samples included in the VCF file must also be specified. To specify multiple samples use the -sample parameter multiple times (example -sample sampleA -sample sampleB ..). VCF files might as well be filtered by genomic intervals prior to variant uploading. To upload variants filtered by multiple panels use the options -panel panelA -panel panelB, providing the path to a bed file containing the genomic intervals of interest. Additional variants for the same sample(s) and the same dataset might be added any time by running the same cgbeacon2 add variants specifying another VCF file. Whenever the variant is already found for the same sample and the same dataset it will not be saved twice.","title":"Adding variant data"},{"location":"queries/","text":"Beacon endpoints and queries Info endpoint Query endpoint Queries using the web interface Advanced query parameters Server endpoints - / . General info regarding this Beacon, including a description of its datasets, API version, sample count etc, can be obtained by sending a GET request using the following shell command: curl -X GET 'http://localhost:5000/apiv1.0/' Demo beacon will reply to this request with a JSON object like this: {\"alternativeUrl\":null,\"apiVersion\":\"v1.0.0\",\"createDateTime\":\"Tue, 23 Jun 2020 14:33:52 GMT\",\"datasets\":[{\"assembly_id\":\"GRCh37\",\"callCount\":483,\"created\":\"Tue, 23 Jun 2020 14:33:52 GMT\",\"id\":\"test_public\",\"info\":{\"accessType\":\"PUBLIC\"},\"name\":\"Test public dataset\",\"sampleCount\":1,\"updated\":\"Tue, 23 Jun 2020 14:33:53 GMT\",\"variantCount\":408,\"version\":1.0}],\"description\":\"Beacon description\",\"id\":\"SciLifeLab-beacon\",\"name\":\"SciLifeLab Stockholm Beacon\",\"organisation\":{\"address\":\"\",\"contactUrl\":\"\",\"description\":\"A science lab\",\"id\":\"scilifelab\",\"info\":[],\"logoUrl\":\"\",\"name\":\"Clinical Genomics, SciLifeLab\",\"welcomeUrl\":\"\"},\"sampleAlleleRequests\":[{\"alternateBases\":\"A\",\"assemblyId\":\"GRCh37\",\"datasetIds\":[\"test_public\"],\"includeDatasetResponses\":\"HIT\",\"referenceBases\":\"C\",\"referenceName\":\"1\",\"start\":156146085},{\"assemblyId\":\"GRCh37\",\"includeDatasetResponses\":\"ALL\",\"referenceBases\":\"C\",\"referenceName\":\"20\",\"start\":54963148,\"variantType\":\"DUP\"}],\"updateDateTime\":\"Tue, 23 Jun 2020 14:33:53 GMT\",\"version\":\"v1.1\",\"welcomeUrl\":null} - /query . Query endpoint supports both GET and POST requests. Example of a GET request: curl -X GET \\ 'http://localhost:5000/apiv1.0/query?referenceName=1&referenceBases=C&start=156146085&assemblyId=GRCh37&alternateBases=A' Example of a POST request: curl -X POST \\ -H 'Content-Type: application/json' \\ -d '{\"referenceName\": \"1\", \"start\": 156146085, \"referenceBases\": \"C\", \"alternateBases\": \"A\", \"assemblyId\": \"GRCh37\", \"includeDatasetResponses\": \"HIT\"}' http://localhost:5000/apiv1.0/query The Beacon reply to a query of this type would be a json object where the \"exist\" key will be true if the allele is found, otherwise it will be false. {\"allelRequest\":{\"alternateBases\":\"A\",\"assemblyId\":\"GRCh37\",\"datasetIds\":[],\"includeDatasetResponses\":\"NONE\",\"referenceBases\":\"C\",\"referenceName\":\"1\",\"start\":\"156146085\"},\"apiVersion\":\"1.0.0\",\"beaconId\":\"SciLifeLab-beacon\",\"datasetAlleleResponses\":[],\"error\":null,\"exists\":true} Web interface A simple web interface to perform interactive queries can be used by typing the following address in any browser window: http://127.0.0.1:5000/apiv1.0/query_form At the moment this interface is disconnected with Elixir AAI so all queries will be limited to the available public datasets in the Beacon. Advanced queries Required parameters assemblyId : Genome build (GRC notation, example: GRCh37). referenceName : Chromosome name () 1-22, X, Y, MT). referenceBases : Reference bases for a variant. Accepted values: [ACGT]* . start : Precise start coordinate position, allele locus (0-based). start coordinate: for single positions, in general for retrieving information on SNVs and InDels. the use of start without an end parameter requires the use of referenceBases . start and end coordinates: In general used to retrieve information for structural variants where start and end exact positions are known. startMin : Minimum start coordinate for querying imprecise positions, for instance when a structural variants is suspected to have a breakpoint within a startMin and startMax interval. Similarly variants with the other breakpoint ending in another interval can be found by specifying endMin and endMax coordinates. startMax : Maximum start coordinate. See startMin . end : Precise end coordinate (0-based, exclusive). See start . endMin : Minimum end coordinate. See startMin . endMax : Maximum end coordinate. See startMin . Either Start and/or End coordinates or range coordinates must be specified in the query. Additional optional parameters variantType : is used especially to query structural variants. Examples: SNV, DEL, DUP, BND .. alternateBases : The bases that appear instead of the reference bases. Accepted values: [ACGT]* Either alternateBases or variantType is required in all queries datasetIds : specific dataset IDs to search in. If this parameter is not provided then all datasets of a beacon will be searched. includeDatasetResponses : whether if the beacon should return a dataset-specific response or a simple yes/no reply. Accepted values: ALL : return a specific result from all available datasets in the beacon. HIT : return a specific result from from all dataset where there is a positive match for the variant. MISS : return a specific result from from all dataset where the variant was not found. NONE : do not include dataset-specific info in the request. The same type of request is obtained when includeDatasetResponses parameter is not provided. The advantage of including includeDatasetResponses in query is that in case of positive match, other useful statistics will be returned at the dataset level, such as variantCount , callCount and sampleCount . This is an example of a positive match response from this beacon populated with demo data: {\"allelRequest\":{\"alternateBases\":\"A\",\"assemblyId\":\"GRCh37\",\"datasetIds\":[],\"includeDatasetResponses\":\"HIT\",\"referenceBases\":\"C\",\"referenceName\":\"1\",\"start\":156146085},\"apiVersion\":\"1.0.0\",\"beaconId\":\"SciLifeLab-beacon\",\"datasetAlleleResponses\":[{\"callCount\":1,\"datasetId\":\"test_public\",\"exists\":true,\"info\":{\"accessType\":\"PUBLIC\"},\"sampleCount\":1,\"variantCount\":1}],\"error\":null,\"exists\":true}","title":"Queries"},{"location":"queries/#beacon-endpoints-and-queries","text":"Info endpoint Query endpoint Queries using the web interface Advanced query parameters","title":"Beacon endpoints and queries"},{"location":"queries/#server-endpoints","text":"- / . General info regarding this Beacon, including a description of its datasets, API version, sample count etc, can be obtained by sending a GET request using the following shell command: curl -X GET 'http://localhost:5000/apiv1.0/' Demo beacon will reply to this request with a JSON object like this: {\"alternativeUrl\":null,\"apiVersion\":\"v1.0.0\",\"createDateTime\":\"Tue, 23 Jun 2020 14:33:52 GMT\",\"datasets\":[{\"assembly_id\":\"GRCh37\",\"callCount\":483,\"created\":\"Tue, 23 Jun 2020 14:33:52 GMT\",\"id\":\"test_public\",\"info\":{\"accessType\":\"PUBLIC\"},\"name\":\"Test public dataset\",\"sampleCount\":1,\"updated\":\"Tue, 23 Jun 2020 14:33:53 GMT\",\"variantCount\":408,\"version\":1.0}],\"description\":\"Beacon description\",\"id\":\"SciLifeLab-beacon\",\"name\":\"SciLifeLab Stockholm Beacon\",\"organisation\":{\"address\":\"\",\"contactUrl\":\"\",\"description\":\"A science lab\",\"id\":\"scilifelab\",\"info\":[],\"logoUrl\":\"\",\"name\":\"Clinical Genomics, SciLifeLab\",\"welcomeUrl\":\"\"},\"sampleAlleleRequests\":[{\"alternateBases\":\"A\",\"assemblyId\":\"GRCh37\",\"datasetIds\":[\"test_public\"],\"includeDatasetResponses\":\"HIT\",\"referenceBases\":\"C\",\"referenceName\":\"1\",\"start\":156146085},{\"assemblyId\":\"GRCh37\",\"includeDatasetResponses\":\"ALL\",\"referenceBases\":\"C\",\"referenceName\":\"20\",\"start\":54963148,\"variantType\":\"DUP\"}],\"updateDateTime\":\"Tue, 23 Jun 2020 14:33:53 GMT\",\"version\":\"v1.1\",\"welcomeUrl\":null} - /query . Query endpoint supports both GET and POST requests. Example of a GET request: curl -X GET \\ 'http://localhost:5000/apiv1.0/query?referenceName=1&referenceBases=C&start=156146085&assemblyId=GRCh37&alternateBases=A' Example of a POST request: curl -X POST \\ -H 'Content-Type: application/json' \\ -d '{\"referenceName\": \"1\", \"start\": 156146085, \"referenceBases\": \"C\", \"alternateBases\": \"A\", \"assemblyId\": \"GRCh37\", \"includeDatasetResponses\": \"HIT\"}' http://localhost:5000/apiv1.0/query The Beacon reply to a query of this type would be a json object where the \"exist\" key will be true if the allele is found, otherwise it will be false. {\"allelRequest\":{\"alternateBases\":\"A\",\"assemblyId\":\"GRCh37\",\"datasetIds\":[],\"includeDatasetResponses\":\"NONE\",\"referenceBases\":\"C\",\"referenceName\":\"1\",\"start\":\"156146085\"},\"apiVersion\":\"1.0.0\",\"beaconId\":\"SciLifeLab-beacon\",\"datasetAlleleResponses\":[],\"error\":null,\"exists\":true}","title":"Server endpoints"},{"location":"queries/#web-interface","text":"A simple web interface to perform interactive queries can be used by typing the following address in any browser window: http://127.0.0.1:5000/apiv1.0/query_form At the moment this interface is disconnected with Elixir AAI so all queries will be limited to the available public datasets in the Beacon.","title":"Web interface"},{"location":"queries/#advanced-queries","text":"","title":"Advanced queries"},{"location":"queries/#required-parameters","text":"assemblyId : Genome build (GRC notation, example: GRCh37). referenceName : Chromosome name () 1-22, X, Y, MT). referenceBases : Reference bases for a variant. Accepted values: [ACGT]* . start : Precise start coordinate position, allele locus (0-based). start coordinate: for single positions, in general for retrieving information on SNVs and InDels. the use of start without an end parameter requires the use of referenceBases . start and end coordinates: In general used to retrieve information for structural variants where start and end exact positions are known. startMin : Minimum start coordinate for querying imprecise positions, for instance when a structural variants is suspected to have a breakpoint within a startMin and startMax interval. Similarly variants with the other breakpoint ending in another interval can be found by specifying endMin and endMax coordinates. startMax : Maximum start coordinate. See startMin . end : Precise end coordinate (0-based, exclusive). See start . endMin : Minimum end coordinate. See startMin . endMax : Maximum end coordinate. See startMin . Either Start and/or End coordinates or range coordinates must be specified in the query.","title":"Required parameters"},{"location":"queries/#additional-optional-parameters","text":"variantType : is used especially to query structural variants. Examples: SNV, DEL, DUP, BND .. alternateBases : The bases that appear instead of the reference bases. Accepted values: [ACGT]* Either alternateBases or variantType is required in all queries datasetIds : specific dataset IDs to search in. If this parameter is not provided then all datasets of a beacon will be searched. includeDatasetResponses : whether if the beacon should return a dataset-specific response or a simple yes/no reply. Accepted values: ALL : return a specific result from all available datasets in the beacon. HIT : return a specific result from from all dataset where there is a positive match for the variant. MISS : return a specific result from from all dataset where the variant was not found. NONE : do not include dataset-specific info in the request. The same type of request is obtained when includeDatasetResponses parameter is not provided. The advantage of including includeDatasetResponses in query is that in case of positive match, other useful statistics will be returned at the dataset level, such as variantCount , callCount and sampleCount . This is an example of a positive match response from this beacon populated with demo data: {\"allelRequest\":{\"alternateBases\":\"A\",\"assemblyId\":\"GRCh37\",\"datasetIds\":[],\"includeDatasetResponses\":\"HIT\",\"referenceBases\":\"C\",\"referenceName\":\"1\",\"start\":156146085},\"apiVersion\":\"1.0.0\",\"beaconId\":\"SciLifeLab-beacon\",\"datasetAlleleResponses\":[{\"callCount\":1,\"datasetId\":\"test_public\",\"exists\":true,\"info\":{\"accessType\":\"PUBLIC\"},\"sampleCount\":1,\"variantCount\":1}],\"error\":null,\"exists\":true}","title":"Additional optional parameters"},{"location":"removing/","text":"Removing variants for one or more samples To remove all variants from one or more samples of a dataset you can use the following command: cgbeacon2 delete variants -ds TEXT dataset ID [required] -sample TEXT one or more samples to remove variants for [required] Note that dataset ID (-ds) and sample are mandatory parameters. To specify multiple samples you should use the -sample option multiple times. Removing a specific dataset Use the command to remove a dataset from the database: cgbeacon2 delete dataset -id <dataset_id>","title":"Removing datasets and variants"},{"location":"removing/#removing-variants-for-one-or-more-samples","text":"To remove all variants from one or more samples of a dataset you can use the following command: cgbeacon2 delete variants -ds TEXT dataset ID [required] -sample TEXT one or more samples to remove variants for [required] Note that dataset ID (-ds) and sample are mandatory parameters. To specify multiple samples you should use the -sample option multiple times.","title":"Removing variants for one or more samples"},{"location":"removing/#removing-a-specific-dataset","text":"Use the command to remove a dataset from the database: cgbeacon2 delete dataset -id <dataset_id>","title":"Removing a specific dataset"}]}